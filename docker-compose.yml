version: '3.8'

services:
  # Temporal Server Dependencies
  elasticsearch:
    image: elasticsearch:7.16.2
    container_name: temporal-elasticsearch
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - temporal-network

  postgresql:
    image: postgres:13
    container_name: temporal-postgresql
    environment:
      POSTGRES_USER: temporal
      POSTGRES_PASSWORD: temporal
      POSTGRES_DB: temporal
    ports:
      - "15432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - temporal-network

  # Temporal Server
  temporal:
    image: temporalio/auto-setup:latest
    container_name: temporal-server
    depends_on:
      - postgresql
      - elasticsearch
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
    ports:
      - "7233:7233"
      - "7234:7234"
      - "7235:7235"
      - "7239:7239"
    volumes:
      - ./temporal-config:/etc/temporal/config/dynamicconfig
    networks:
      - temporal-network

  # Temporal Web UI
  temporal-web:
    image: temporalio/ui:latest
    container_name: temporal-web
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:8080
    ports:
      - "8080:8080"
    networks:
      - temporal-network

  # Our Application Services
  web-app:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: web-app
    container_name: temporal-llm-web-app
    depends_on:
      - temporal
    environment:
      - TEMPORAL_HOST=temporal:7233
      - TEMPORAL_NAMESPACE=default
      - TEMPORAL_TASK_QUEUE=reverse-string-task-queue
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4-turbo-preview}
    ports:
      - "8001:8000"
    volumes:
      - ./frontend:/app/frontend:ro
      - ./backend:/app/backend:ro
    networks:
      - temporal-network
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: worker
    depends_on:
      - temporal
    environment:
      - TEMPORAL_HOST=temporal:7233
      - TEMPORAL_NAMESPACE=default
      - TEMPORAL_TASK_QUEUE=reverse-string-task-queue
    volumes:
      - ./backend:/app/backend:ro
    networks:
      - temporal-network
    restart: unless-stopped
    deploy:
      replicas: 2

volumes:
  elasticsearch_data:
  postgres_data:

networks:
  temporal-network:
    driver: bridge 